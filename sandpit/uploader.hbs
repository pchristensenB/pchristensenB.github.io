{{#> base }}

{{#*inline "content-block"}}

				<!-- Box Content Explorer -->
				<div class="tab-pane show active mts" role="tabpanel" id="explorer">
					<p>access token: {{token}}</p>
					<div style="height:500px" class="pcontainer"></div>
				</div>

				<script src="https://cdn01.boxcdn.net/platform/elements/6.0.0/en-US/uploader.js"></script>
			  <link rel="stylesheet" href="https://cdn01.boxcdn.net/platform/elements/6.0.0/en-US/uploader.css" />

<script>
var contentUploader;
var conflictsMap = new Map();
var testResponseInterceptor = (response /* https://github.com/axios/axios#request-config */) => {
		if(response.type) {
			if(response.type=='error' && response.status=='409') {
				console.log(JSON.stringify(response));

				var name = response.context_info.conflicts.name;
				var conflictId = response.context_info.conflicts.id;
				conflictsMap.set(name,conflictId);
				console.log("name:" + name + " / " + "id:" + conflictId + " / " + conflictsMap.size);
			}
		}
	return response;
};

var testRequestInterceptor = (config /* https://github.com/axios/axios#response-config */) => {
	//console.log(JSON.stringify(config));
	if(method=='post') {
			//add timestamp to name to mimic existing functionality
			var jsonRep = JSON.parse(config.data.attributes);
			console.log(config.data.attributes);
			console.log(" trying to find:" + jsonRep.name  + " / " + conflictsMap.get(jsonRep.name));
			if(conflictsMap.get(jsonRep.name)!=null) {
				var fileName =jsonRep.name.substring(0,jsonRep.name.lastIndexOf("."));
				var ext = jsonRep.name.substring(jsonRep.name.lastIndexOf(".")+1);
				var oldName=jsonRep.name;
				jsonRep.name = fileName + "_" + (new Date().toISOString().substring(0, 16)) + "_." + ext;
				var newAttributes = JSON.stringify(jsonRep);
				config.data.attributes = newAttributes;
				console.log(config.url + " - replacing with:" + conflictsMap.get(oldName));
				var newURl = config.url.replace(conflictsMap.get(oldName) + "/","");
				config.url = newURl;
			}
		}
	  return config;
};

  var fileId = '{{id}}';
  var accessToken = '{{token}}';
 	contentUploader = new Box.ContentUploader();
	contentUploader.show(fileId, accessToken, {
		container: '.pcontainer',
		requestInterceptor:testRequestInterceptor,
		responseInterceptor:testResponseInterceptor,

	});
	contentUploader.on('complete', (data) => {
			console.log('All files successfully uploaded:' +  JSON.stringify(data));
			conflictsMap.clear();
	});
	contentUploader.on('error', (data) => {
			console.log('Error:' + JSON.stringify(data));
			conflictsMap.clear();
	});

</script>

{{/inline}}

{{/base}}
